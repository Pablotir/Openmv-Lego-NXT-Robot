import lejos.nxt.*;
import lejos.nxt.comm.BTConnection;
import lejos.nxt.comm.Bluetooth;
import lejos.nxt.comm.NXTConnection;
import java.io.DataInputStream;
import lejos.nxt.addon.tetrix.*;
import lejos.util.Delay;

public class motorBlue {
    private static final String HC06_ADDR_OR_NAME = "HC-06";
    private static final int ULTRASONIC_THRESHOLD = 20; // cm

    // For 4-inch wheels, the circumference is ~12.57 inches.
    // To move 24 inches forward (2 ft), each wheel must turn:
    //   24 / 12.57 ≈ 1.91 rotations, i.e. 1.91 * 360 ≈ 688 degrees.
    private static final int FORWARD_ROTATION_DEGREES = 450;
    
    // To strafe 12 inches (1 ft), the wheels need to turn:
    //   12 / 12.57 ≈ 0.955 rotations, i.e. 0.955 * 360 ≈ 344 degrees.
    private static final int STRAFE_ROTATION_DEGREES = 344;
    
    // For an in-place 90° turn:
    // Assuming an effective track width of ~10 inches, the arc each wheel travels is:
    //   (pi * 10) / 4 inches. Dividing by the wheel circumference (12.57") and converting
    //   to degrees gives about 225° of wheel rotation.
    private static final int TURN_ROTATION_DEGREES = 688;

    public static void main(String[] args) {
        TetrixControllerFactory controllerFactory = new TetrixControllerFactory(SensorPort.S1);
        TetrixMotorController motorController = controllerFactory.newMotorController();
        TetrixMotorController motorController2 = controllerFactory.newMotorController();

        TetrixRegulatedMotor backLeft = motorController.getRegulatedMotor(TetrixMotorController.MOTOR_1);
        TetrixRegulatedMotor backRight = motorController.getRegulatedMotor(TetrixMotorController.MOTOR_2);
        TetrixRegulatedMotor frontLeft = motorController2.getRegulatedMotor(TetrixMotorController.MOTOR_1);
        TetrixRegulatedMotor frontRight = motorController2.getRegulatedMotor(TetrixMotorController.MOTOR_2);

        // Set speeds (adjust as needed)
        backLeft.setSpeed(75);
        frontLeft.setSpeed(75);
        backRight.setSpeed(75);
        frontRight.setSpeed(75);

       // UltrasonicSensor ultrasonic = new UltrasonicSensor(SensorPort.S2);

        LCD.clear();
        LCD.drawString("Connecting...", 0, 0);

        BTConnection connection = Bluetooth.connect(HC06_ADDR_OR_NAME, NXTConnection.RAW);
        if (connection == null) {
            LCD.clear();
            LCD.drawString("Conn failed", 0, 0);
            return;
        }

        LCD.clear();
        LCD.drawString("Connected!", 0, 0);

        DataInputStream dis = connection.openDataInputStream();

        while (true) {
            try {
                if (dis.available() > 0) {
                    String command = dis.readLine().trim().toLowerCase();

                    // Uncomment and adjust obstacle handling if needed.
                    // int distance = ultrasonic.getDistance();
                    // if (distance <= ULTRASONIC_THRESHOLD) {
                    //     Sound.beep();
                    //     stopMotors(backLeft, frontLeft, backRight, frontRight);
                    //     LCD.clear();
                    //     LCD.drawString("Obstacle!", 0, 0);
                    //     continue;
                    // }

                    switch (command) {
                        case "forward":
                            moveForward(backLeft, frontLeft, backRight, frontRight);
                            Delay.msDelay(1500);
                            stopMotors(backLeft, frontLeft, backRight, frontRight);
                            break;
                        case "backward":
                            moveBackward(backLeft, frontLeft, backRight, frontRight);
                            Delay.msDelay(1500);
                            stopMotors(backLeft, frontLeft, backRight, frontRight);
                            break;
                        case "left":
                            rotateLeft(backLeft, frontLeft, backRight, frontRight);
                            Delay.msDelay(1400);
                            stopMotors(backLeft, frontLeft, backRight, frontRight);
                            break;
                        case "right":
                            rotateRight(backLeft, frontLeft, backRight, frontRight);
                            Delay.msDelay(1400);
                            stopMotors(backLeft, frontLeft, backRight, frontRight);
                            break;
                        case "pause":
                            Delay.msDelay(3000);
                            break;
                        default:
                            stopMotors(backLeft, frontLeft, backRight, frontRight);
                            LCD.clear();
                            LCD.drawString("Invalid cmd", 0, 0);
                    }
                }
                Thread.sleep(200);
            } catch (Exception e) {
                LCD.clear();
                LCD.drawString("Error", 0, 0);
                break;
            }
        }

        try {
            dis.close();
            connection.close();
        } catch (Exception e) {
        }
    }

    public static void rotateRight(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                   TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(-FORWARD_ROTATION_DEGREES, true);
        frontLeft.rotate(-FORWARD_ROTATION_DEGREES, true);
        backRight.rotate(-FORWARD_ROTATION_DEGREES, true);
        frontRight.rotate(FORWARD_ROTATION_DEGREES, true);
    }

    public static void rotateLeft(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                    TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(FORWARD_ROTATION_DEGREES, false);
        frontLeft.rotate(FORWARD_ROTATION_DEGREES, false);
        backRight.rotate(FORWARD_ROTATION_DEGREES, false);
        frontRight.rotate(-FORWARD_ROTATION_DEGREES, false);
    }

    public static void moveBackward(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                  TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(TURN_ROTATION_DEGREES, true);
        frontLeft.rotate(-TURN_ROTATION_DEGREES, true);
        backRight.rotate(TURN_ROTATION_DEGREES, true);
        frontRight.rotate(TURN_ROTATION_DEGREES, true);
    }

    public static void moveForward(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                   TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(-TURN_ROTATION_DEGREES, true);
        frontLeft.rotate(TURN_ROTATION_DEGREES, true);
        backRight.rotate(-TURN_ROTATION_DEGREES, true);
        frontRight.rotate(-TURN_ROTATION_DEGREES, true);
    }

    public static void strafeLeft(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                  TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(STRAFE_ROTATION_DEGREES, true);
        frontLeft.rotate(STRAFE_ROTATION_DEGREES, true);
        backRight.rotate(-STRAFE_ROTATION_DEGREES, true);
        frontRight.rotate(STRAFE_ROTATION_DEGREES, true);
    }

    public static void strafeRight(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                   TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.rotate(-STRAFE_ROTATION_DEGREES, true);
        frontLeft.rotate(-STRAFE_ROTATION_DEGREES, true);
        backRight.rotate(STRAFE_ROTATION_DEGREES, true);
        frontRight.rotate(-STRAFE_ROTATION_DEGREES, true);
    }

    public static void stopMotors(TetrixRegulatedMotor backLeft, TetrixRegulatedMotor frontLeft,
                                  TetrixRegulatedMotor backRight, TetrixRegulatedMotor frontRight) {
        backLeft.stop();
        frontLeft.stop();
        backRight.stop();
        frontRight.stop();
    }
}
